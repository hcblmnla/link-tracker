app:
  github-token: ${GITHUB_TOKEN} # env variable
  stackoverflow:
    key: ${SO_TOKEN_KEY}
    access-token: ${SO_ACCESS_TOKEN}
  access-type: SQL
  message-transport:
    http: true
    kafka: false
    fallback: none # {HTTP, Kafka, none}

kafka:
  topic-name: link-updates
  partitions: 1
  replicas: 1
  bootstrap-servers: ${KAFKA_URL:localhost:9092}
  key-serializer: org.apache.kafka.common.serialization.StringSerializer
  value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

spring:
  application:
    name: Scrapper
  liquibase:
    enabled: false
  jpa:
    hibernate:
      ddl-auto: validate
    open-in-view: false
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5432/scrapper}
    username: ${DATASOURCE_USERNAME:postgres}
    password: ${DATASOURCE_PASSWORD:postgres}
  data:
    redis:
      host: localhost
      port: 6379
  kafka:
    admin:
      auto-create: false

server:
  port: 8081
  base-url: http://localhost:8080/
  github-base: https://api.github.com/repos
  stackoverflow-base: https://api.stackexchange.com/2.3/questions

client:
  timeout: 10s
  retry:
    max-attempts: 5
    min-backoff: 2s
    retryable-statuses:
      - 500
      - 502
      - 503
      - 504
  cb:
    sliding-window-size: 1
    minimum-required-calls: 1
    failure-rate-threshold: 100  # OPEN
    permitted-calls-in-half-open-state: 1
    wait-duration-in-open-state: 1s
    name: web-client-circuit-breaker

rate-limit:
  for-period: 10
  refresh-period: 1s
  timeout: 500ms
  rate-limiter: ip-based-rate-limiter

springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui

scheduler:
  delay: 10s

update:
  minutes: 60
  message:
    max-size: 200
    continue-tag: "..."

batch:
  size: 1000
  threads: 1
  awaiting: 1

notification:
  time:
    hours:
      10
    minutes:
      0

logging.structured.format.file: ecs
logging.file.name: log.json

management:
  metrics:
    tags:
      application: ${spring.application.name}
    business:
      scrape:
        percentiles:
          - 0.5
          - 0.95
          - 0.99
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus
      path-mapping:
        prometheus:
          /metrics
  server:
    port: 8091
